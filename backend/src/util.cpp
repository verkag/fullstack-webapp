#include "util.hpp"

#include <openssl/ssl.h>
#include <filesystem>

CustomRegex::CustomRegex(std::string s) : std::regex(s), str(std::move(s)) {}

CustomRegex::CustomRegex(const char* cs) : std::regex(cs), str(cs) {}

bool CustomRegex::operator<(const CustomRegex& rhs) const noexcept {
    return str < rhs.str;
}

void setup_sectificate(boost::asio::ssl::context& ssl_ctx) {
    // key is generated by: openssl ecparam -name prime256v1 -keygen -out key.pem
    // cert is genrerated by: openssl req -new -x509 -key key.pem -out cert.pem -days 3650
    using namespace boost::asio::ssl;

    std::string cert_path = "../ssl/cert.pem";
    std::string key_path = "../ssl/key.pem";
    
    std::filesystem::path cert_abs_path = std::filesystem::canonical(cert_path);
    std::filesystem::path key_abs_path = std::filesystem::canonical(key_path);

    if (!std::filesystem::exists(cert_abs_path) || !std::filesystem::exists(key_abs_path)) {
        throw std::runtime_error("no certificaiton files found");
    }
    ssl_ctx.use_certificate_chain_file(cert_abs_path.string());
    ssl_ctx.use_private_key_file(key_abs_path.string(), context::file_format::pem);
    ssl_ctx.set_options(context::default_workarounds |
                        context::no_sslv2 |
                        context::no_sslv3 |
                        context::single_dh_use
                        );

    SSL_CTX_set_ecdh_auto(ssl_ctx.native_handle(), 1);
}

